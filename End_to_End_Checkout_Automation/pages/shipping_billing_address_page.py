import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from utils.json_reader import JsonReader

logger = logging.getLogger(__name__)

class ShippingBillingAdressPage:
    '''
    Handles the shipping and billing address page interactions.
    This class allows entering billing address details, selecting shipping and payment methods,
    Uses a logic If the user is new or returning.
    '''
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, 10)
        self.test_data = JsonReader.read_test_data("test_data.json")["shipping_billing_address"]

    def enter_billing_address(self, address_data):
        logger.info("Entering billing address details")
        try:
            dropdown = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//select[@id='billing-address-select']")))
            dropdown.click()
            select = Select(dropdown)
            select.select_by_visible_text("New Address")
            logger.info("Selected 'New Address' from billing adress book dropdown")
            first_name_field = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, address_data['first_name_field_xpath'])))
            first_name_field.clear()
            first_name_field.send_keys(address_data['first_name'])    
            last_name_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['last_name_field_xpath'])))
            last_name_field.clear()
            last_name_field.send_keys(address_data['last_name'])      
            email_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['email_field_xpath'])))
            email_field.clear()
            email_field.send_keys(address_data['email'])         
            country_dropdown = self.wait.until(EC.element_to_be_clickable((By.ID, address_data['country_dropdown_id'])))
            country_dropdown.click()
            country_dropdown.send_keys(address_data['country'])
            country_dropdown.send_keys(Keys.ENTER)
            self.driver.implicitly_wait(10)  
            state_dropdown = self.wait.until(EC.element_to_be_clickable((By.ID, address_data['state_dropdown_id'])))
            state_dropdown.click()
            state_dropdown.send_keys(Keys.ENTER)
            self.driver.implicitly_wait(10)  
            city_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['city_field_xpath'])))
            city_field.clear()
            city_field.send_keys(address_data['city'])
            address1_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['address1_field_xpath'])))
            address1_field.clear()  
            address1_field.send_keys(address_data['address1'])
            zip_code_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['zip_code_field_xpath'])))
            zip_code_field.clear()
            zip_code_field.send_keys(address_data['zip_code'])
            phone_number_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['phone_number_field_xpath'])))
            phone_number_field.clear()
            phone_number_field.send_keys(address_data['phone_number'])
            logger.info("Billing address details entered successfully")
            adress_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='Billing.save()']")))
            adress_continue_button.click()
            self.driver.implicitly_wait(10)
            logger.info("Entering Shipping Adress Details ")
            shipping_adress_dropdown = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['shipping_address_dropdown_xpath']))) 
            shipping_adress_dropdown.click()
            shipping_adress_dropdown.send_keys(Keys.ENTER)
            shipping_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='Shipping.save()']")))
            shipping_continue_button.click()
            logger.info("Shipping address details entered successfully")
            logger.info("Selecting Shipping Method Details") 
            shipping_method_radio = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['shipping_method_radio_xpath'])))
            shipping_method_radio.click() 
            shipping_method_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='ShippingMethod.save()']")))
            shipping_method_continue_button.click()
            logger.info("Shipping method selected successfully")            
            logger.info("Selecting Payment Method Details")
            payment_method_radio = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['payment_method_radio_xpath'])))
            payment_method_radio.click()    
            payment_method_radio_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='PaymentMethod.save()']")))
            payment_method_radio_continue_button.click()                
            payment_method_radio_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='PaymentInfo.save()']")))
            payment_method_radio_continue_button.click()      
            payment_info_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='ConfirmOrder.save()']")))   
            payment_info_continue_button.click()
            logger.info("Payment method selected successfully")
            logger.info("Shipping and Billing Address Details entered Successfully ! ")
            
        except TimeoutException:
            logger.error("Entering billing address details directly as a New User")
            first_name_field = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, address_data['first_name_field_xpath'])))
            first_name_field.clear()
            first_name_field.send_keys(address_data['first_name'])        
            last_name_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['last_name_field_xpath'])))
            last_name_field.clear()
            last_name_field.send_keys(address_data['last_name'])      
            email_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['email_field_xpath'])))
            email_field.clear()
            email_field.send_keys(address_data['email'])         
            country_dropdown = self.wait.until(EC.element_to_be_clickable((By.ID, address_data['country_dropdown_id'])))
            country_dropdown.click()
            country_dropdown.send_keys(address_data['country'])
            country_dropdown.send_keys(Keys.ENTER)
            self.driver.implicitly_wait(10)  
            state_dropdown = self.wait.until(EC.element_to_be_clickable((By.ID, address_data['state_dropdown_id'])))
            state_dropdown.click()
            state_dropdown.send_keys(Keys.ENTER)
            self.driver.implicitly_wait(10)  
            city_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['city_field_xpath'])))
            city_field.clear()
            city_field.send_keys(address_data['city'])
            address1_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['address1_field_xpath'])))
            address1_field.clear()  
            address1_field.send_keys(address_data['address1'])
            zip_code_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['zip_code_field_xpath'])))
            zip_code_field.clear()
            zip_code_field.send_keys(address_data['zip_code'])
            phone_number_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['phone_number_field_xpath'])))
            phone_number_field.clear()
            phone_number_field.send_keys(address_data['phone_number'])
            logger.info("Billing address details entered successfully")
            adress_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='Billing.save()']")))
            adress_continue_button.click()
            logger.info("Entering Shipping Adress Details ")
            shipping_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='Shipping.save()']")))
            shipping_continue_button.click()
            logger.info("Shipping address details entered successfully")
            logger.info("Selecting Shipping Method Details") 
            shipping_method_radio = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['shipping_method_radio_xpath'])))
            shipping_method_radio.click() 
            shipping_method_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='ShippingMethod.save()']")))
            shipping_method_continue_button.click()
            logger.info("Shipping method selected successfully") 
            logger.info("Selecting Payment Method Details")
            payment_method_radio = self.wait.until(EC.element_to_be_clickable((By.XPATH, address_data['payment_method_radio_xpath'])))
            payment_method_radio.click() 
            payment_method_radio_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='PaymentMethod.save()']")))
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", payment_method_radio_continue_button)
            payment_method_radio_continue_button.click()    
            payment_method_radio_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='PaymentInfo.save()']")))
            payment_method_radio_continue_button.click()    
            payment_info_continue_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@onclick='ConfirmOrder.save()']")))   
            payment_info_continue_button.click()
            logger.info("Payment method selected successfully")
            logger.info("Shipping and Billing Address Details entered Successfully ! ")
          
        except Exception as e:
            logger.error(f"An error occurred while entering billing address: {e}")
            raise e
    def click_continue(self):
        logger.info("Clicking continue button on billing address page")
        self.wait.until(EC.element_to_be_clickable(self.continue_button)).click()
        logger.info("Continue button clicked")  